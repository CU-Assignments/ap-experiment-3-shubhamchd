#Aim:
To rotate a linked list to the right by k positions.

##Objectives:

Find the length of the linked list and the last node (tail).
Adjust k to be within the range of the list length.
Traverse to the node before the new head after rotation.
Break the list at the new head and connect the tail to the original head.

###Code
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head){
            return head;
        }
        int length=1;
        ListNode* tail=head;
        ListNode* cur=head;
        while (tail->next){
            tail=tail->next;
            length++;
        }
        k=k%length;
        if (k==0){
            return head;
        }
        for(int i=0;i<length-k-1;i++){
            cur=cur->next;
        }
        ListNode* newh=cur->next;
        cur->next=nullptr;
        tail->next=head;
        return newh;
    }
};
